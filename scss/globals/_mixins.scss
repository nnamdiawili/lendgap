// -------------------------------------------------------------------------
// Positioning
// -------------------------------------------------------------------------

// Accepts 's, r, a, f' as shorthands"
@mixin position($shorthand, $offsets) {
  @if $shorthand != null {
    @if $shorthand == 's' or $shorthand == 'static' {
      position: static;
    } @else if $shorthand == 'r' or $shorthand == 'relative' {
      position: relative;
    } @else if $shorthand == 'a' or $shorthand == 'absolute' {
      position: absolute;
    } @else if $shorthand == 'f' or $shorthand == 'fixed' {
      position: fixed;
    }
  }
  // position ALL the offsets
  @if length($offsets) == 1 {
    // save me writing four times
    $position-property: top, right, bottom, left;
    @if $offsets != none {
      @each $property in $position-property {
        #{$property}: $offsets;
      }
    }
  } @else if length($offsets) == 2 {
    @if nth($offsets, 1) != none {
      bottom: nth($offsets, 1);
      top: nth($offsets, 1);
    }
    @if nth($offsets, 2) != none {
      left: nth($offsets, 2);
      right: nth($offsets, 2);
    }
  } @else if length($offsets) == 3 {
    @if nth($offsets, 1) != none {
      top: nth($offsets, 1);
    }
    @if nth($offsets, 2) != none {
      left: nth($offsets, 2);
      right: nth($offsets, 2);
    }
    @if nth($offsets, 3) != none {
      bottom: nth($offsets, 3);
    }
  } @else if length($offsets) == 4 {
    @if nth($offsets, 1) != none {
      top: nth($offsets, 1);
    }
    @if nth($offsets, 2) != none {
      right: nth($offsets, 2);
    }
    @if nth($offsets, 3) != none {
      bottom: nth($offsets, 3);
    }
    @if nth($offsets, 4) != none {
      left: nth($offsets, 4);
    }
  }
}



// -------------------------------------------------------------------------
// Responsive Properties
// -------------------------------------------------------------------------

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-prop($prop, $min-vw-value, $max-vw-value, $min-vw: $grid-breakpoint-xs, $max-vw: $grid-breakpoint-lg, $inverted: false) {
  $min-value: $min-vw-value;
  $max-value: $max-vw-value;

  @if $inverted {
    $min-value: $max-vw-value;
    $max-value: $min-vw-value;
  }

  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-value);
  $u4: unit($max-value);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      #{$prop}: $min-value;
      @media screen and (min-width: $min-vw) {
        #{$prop}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        #{$prop}: $max-value;
      }
    }
  }
}


// -------------------------------------------------------------------------
// Grid and Grid Items
// -------------------------------------------------------------------------

@mixin fluid-grid-item($breakpoint, $columns, $gutter) {
  @media (min-width: $breakpoint) {
    width: calc((100% - (#{$gutter} * (#{$columns} - 1))) / #{$columns});
    margin-left: $gutter;

    &:first-child,
    &:nth-child(#{$columns}n+1) {
      margin-left: 0;
    }
    &:nth-child(n+#{$columns + 1}) {
      margin-top: $gutter;
    }
  }
}